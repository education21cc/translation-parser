{"version":3,"sources":["hooks/useLocalforage.ts","components/ApiKey.tsx","components/SheetId.tsx","components/SheetData/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useLocalforage","key","useState","data","setData","useEffect","localforage","getItem","then","value","useCallback","newData","setItem","ApiKey","error","setError","apiKey","setApiKey","handleClear","InputGroup","className","FormControl","placeholder","readOnly","Append","Button","variant","onClick","file","Form","File","type","accept","onChange","event","target","files","reader","FileReader","addEventListener","readEvent","parsed","JSON","parse","result","undefined","client_email","private_key","name","credentials","e","readAsText","SheetId","sheetId","setSheetId","Control","SheetData","props","doc","setDoc","selectedSheet","setSelectedSheet","languages","setLanguages","selectedLanguage","setSelectedLanguage","a","GoogleSpreadsheet","useServiceAccountAuth","loadInfo","sheetsByIndex","console","log","response","status","fetch","sheetsById","loadHeaderRow","headersExceptFirst","headerValues","filter","v","i","getRows","indexOf","Alert","split","map","item","Card","Body","Group","Label","as","sheet","title","lang","keyName","rows","obj","reduce","acc","document","createElement","text","stringify","filename","setAttribute","encodeURIComponent","click","download","App","Jumbotron","Container","Text","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8f44dbfa.chunk.js","sourcesContent":["import { useState, useCallback, useEffect } from \"react\";\nimport localforage from \"localforage\";\n\nconst useLocalforage = <T>(key: string): [(T|null), (newData: T|null) => void] => {\n    const [data, setData] = useState<T|null>(null);\n\n    useEffect(() => {\n      localforage.getItem<T>(key).then((value: T) => {\n        setData(value);\n    });\n    }, [key]);\n\n\n    const update = useCallback((newData: T|null) => {\n        setData(newData);\n        localforage.setItem(key, newData);\n    }, [key]);\n    \n    return [\n        data,\n        update\n    ]\n}\n\nexport default useLocalforage;","import React, { useState } from \"react\";\nimport useLocalforage from \"../hooks/useLocalforage\";\nimport { InputGroup, FormControl, Button, Form } from 'react-bootstrap';\nimport { ServiceAccountCredentials } from \"google-spreadsheet\";\n\nexport interface ApiKeyData {\n    file: string;\n    credentials: ServiceAccountCredentials;\n}\n\nconst ApiKey = () => {\n    const [error, setError] = useState<string|null>();\n    const [apiKey, setApiKey] = useLocalforage<ApiKeyData>('apiKey');\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const file = event.target?.files?.[0];\n        if (!file) return null;\n        const reader = new FileReader();\n        const loadComplete = (readEvent: ProgressEvent<FileReader>) => {\n            // validate! \n            try {\n                const parsed = JSON.parse(readEvent.target?.result as string);\n                if (parsed.client_email === undefined || parsed.private_key === undefined) {\n                    setError(\"Not a valid JSON file!\")\n                }\n                // if (parsed.type !== \"service_account\") {\n                //     setError(\"Not a valid JSON file!\")\n                // }\n                const data: ApiKeyData = {\n                    file: file.name,\n                    credentials: parsed as ServiceAccountCredentials\n                }\n                setApiKey(data);\n            }\n            catch (e) {\n                setError(\"Error reading file. Is it a API json file?\")\n            }\n        };\n        \n        reader.addEventListener(\"load\", loadComplete);\n        reader.readAsText(file);\n    }\n\n    const handleClear = () => {\n        setApiKey(null);\n    }\n\n    if (error) {\n        return (\n            <InputGroup className=\"mb-3\">\n                <FormControl\n                    placeholder={error}\n                    className=\"text-danger\"\n                    readOnly\n                />\n                <InputGroup.Append>\n                    <Button variant=\"outline-secondary\" onClick={handleClear}>Clear</Button>\n                </InputGroup.Append>\n            </InputGroup>\n        );    \n    }\n\n    if (apiKey) {\n        return (\n            <InputGroup className=\"mb-3\">\n                <FormControl\n                    placeholder={apiKey.file}\n                    readOnly\n                />\n                <InputGroup.Append>\n                    <Button variant=\"outline-secondary\" onClick={handleClear}>Clear</Button>\n                </InputGroup.Append>\n            </InputGroup>\n        );    \n    }\n\n    return (\n        <Form.File type=\"file\" accept=\".json\" onChange={handleChange}/>\n    );\n}\n\nexport default ApiKey;","import React, { useState } from \"react\";\nimport useLocalforage from \"../hooks/useLocalforage\";\nimport { InputGroup, FormControl, Button, Form } from 'react-bootstrap';\n\n\nconst SheetId = () => {\n    const [sheetId, setSheetId] = useLocalforage<string>('sheetId');\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setSheetId(event.target.value);        \n    }\n\n\n    return (\n        <Form.Control type=\"text\" value={sheetId || \"\"} onChange={handleChange}/>\n    );\n}\n\nexport default SheetId;","import { GoogleSpreadsheet, ServiceAccountCredentials, GoogleSpreadsheetRow } from 'google-spreadsheet';\nimport React, { useEffect, useState, useMemo } from 'react';\nimport { Alert, Card, Form, Button } from 'react-bootstrap';\n\ninterface Props {\n    sheetId: string;\n    credentials: ServiceAccountCredentials;\n}\nconst SheetData = (props: Props) => {\n    const [error, setError] = useState<string|null>();\n    const [doc, setDoc] = useState<GoogleSpreadsheet>()\n    const [selectedSheet, setSelectedSheet] = useState<string>();\n    const [languages, setLanguages] = useState<string[]>([]);\n    const [selectedLanguage, setSelectedLanguage] = useState<string>();\n\n    useEffect(() => {\n        const fetch = async () => {\n            try {\n                const doc = new GoogleSpreadsheet(props.sheetId);\n                await doc.useServiceAccountAuth(props.credentials);\n                await doc.loadInfo();\n                \n                setSelectedSheet(doc.sheetsByIndex[0].sheetId);\n                console.log('x', doc.sheetsByIndex[0].sheetId)\n                setDoc(doc);\n            }\n            catch (e) {\n                //debugger;\n                console.log(e);\n                if (!e.response) {\n                    setError(`Generic error!\\n${e}`);\n                    return;\n                }\n                switch (e.response.status) {\n                    case 403: \n                        setError(`Credentials invalid. \\nEnsure '${props.credentials.client_email}' has read access to the sheet.`);\n                        break;\n                    case 404: \n                        setError(\"Invalid sheet id\");\n                        break;\n                }\n            }\n        };\n        fetch();\n    }, [props.credentials, props.sheetId]);\n    \n    useEffect(() => {\n        if (!doc || selectedSheet === undefined) { return };\n        const getRows = async () => {\n            await doc.sheetsById[selectedSheet].loadHeaderRow();\n\n            const headersExceptFirst = doc.sheetsById[selectedSheet].headerValues.filter((v, i) => i > 0);\n            setLanguages(headersExceptFirst);\n        }\n        getRows();\n    }, [doc, selectedSheet]);\n    \n\n    useEffect(() => {\n        // If list of languages has changed and the previous value is not found, reset to first value\n        if (!selectedLanguage || languages.indexOf(selectedLanguage) === -1) {\n            setSelectedLanguage(languages[0]);\n        }        \n    }, [languages, selectedLanguage])\n\n    const handleSheetChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n        setSelectedSheet(event.target.value)\n    }\n\n    const handleLanguageChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n        setSelectedLanguage(event.target.value);\n    }\n\n    const handleDownload = () => {\n        const download = async () => {\n            if (!doc || selectedLanguage === undefined || selectedSheet === undefined) return;\n            const keyName = doc.sheetsById[selectedSheet].headerValues[0];  // should be just 'key' but you never know\n            const rows = await doc.sheetsById[selectedSheet].getRows();\n            const obj = rows.reduce((acc: {[key: string]: string}, value: GoogleSpreadsheetRow) => {\n                if (value[keyName] !== undefined) {\n                    acc[value[keyName] as string] = value[selectedLanguage];\n                }\n                return acc;\n            }, {});\n            \n            const a = document.createElement('a');\n            const text = JSON.stringify(obj);\n            const filename = `${doc.sheetsById[selectedSheet].title}_${selectedLanguage}.json`;\n            a.setAttribute('href', 'data:text/json;charset=utf-8,'+encodeURIComponent(text));\n            a.setAttribute('download', filename);\n            a.click()\n        }\n        download();\n      }\n\n\n    if (error) {\n        return (\n            <Alert variant=\"danger\">\n                {error.split('\\n').map((item, i) => {\n                    return <p key={i}>{item}</p>;\n                })}\n            </Alert>\n        );\n    }\n\n    if (!doc || selectedSheet === undefined) {\n        return (\n            <Alert variant=\"info\">Loading...</Alert>\n        )\n    }\n//console.log(rows)\n\n    return (\n        <Card>\n            <Card.Body>\n                <Form.Group>\n                    <Form.Label>Game</Form.Label>\n                    <Form.Control as=\"select\" onChange={handleSheetChange}>\n                        {doc.sheetsByIndex.map(sheet => (\n                            <option key={sheet.sheetId} value={sheet.sheetId}>{sheet.title}</option>\n                        ))}\n                    </Form.Control>\n                    {/* <SheetSelector list={doc.sheetsByIndex.map(s => s.title)} onChange={handleSheetChange} /> */}\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>Language</Form.Label>\n                    <Form.Control as=\"select\" onChange={handleLanguageChange}>\n                        {languages.map(lang => (\n                            <option key={lang} value={lang}>{lang}</option>\n                        ))}\n                    </Form.Control>\n                    {/* <SheetSelector list={doc.sheetsByIndex.map(s => s.title)} onChange={handleSheetChange} /> */}\n                </Form.Group>\n                {  (selectedLanguage !== undefined && selectedSheet !== undefined) && (\n                    <Button onClick={handleDownload}>\n                        Download\n                    </Button>\n                )}\n                {/* {JSON.stringify(doc.sheetsById[selectedSheet].getRows())} */}\n            </Card.Body>\n        </Card>\n    );\n}\n\nexport default SheetData;","import React from 'react';\nimport './App.css';\nimport ApiKey, { ApiKeyData } from './components/ApiKey';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Form from 'react-bootstrap/Form';\nimport Container from 'react-bootstrap/Container';\nimport SheetId from 'components/SheetId';\nimport useLocalforage from 'hooks/useLocalforage';\nimport SheetData from 'components/SheetData';\n\nfunction App() {\n  const [apiKey] = useLocalforage<ApiKeyData>('apiKey');\n  const [sheetId] = useLocalforage<string>('sheetId');\n\n  return (\n    \n    <div className=\"App\">\n      <Jumbotron className=\"text-center\">\n        <h1>Translation parser</h1>\n      </Jumbotron>\n      <Container>\n        <Form>\n          <Form.Group>\n            <Form.Label>API Key (json file)</Form.Label>\n            <Form.Text className=\"text-muted\">\n              <ol>\n                <li>Go to: https://console.developers.google.com/ and create a project</li>\n                <li>Add the Google Sheets API</li>\n                <li>Create a service account</li>\n                <li>Create a new JSON key under this service account and upload this key here</li>\n                <li>Ensure share the google sheet to the the e-mail address of the service account</li>\n              </ol>\n            </Form.Text>\n            <ApiKey />\n          </Form.Group>\n          <Form.Group>\n            <Form.Label>Sheet ID</Form.Label>\n            <Form.Text className=\"text-muted\">\n              {`Copy from https://docs.google.com/spreadsheets/d/<SHEET ID>`}\n            </Form.Text>\n            <SheetId />\n          </Form.Group>\n        </Form>\n      </Container>\n      <Container>\n        { (apiKey && sheetId) && (\n          <SheetData sheetId={sheetId} credentials={apiKey.credentials} />\n        )}\n      </Container>\n        <p>\n        </p>       \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}