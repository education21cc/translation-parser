{"version":3,"sources":["hooks/useLocalforage.ts","components/ApiKey.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useLocalforage","key","useState","data","setData","useEffect","localforage","getItem","then","value","useCallback","newData","setItem","ApiKey","error","setError","json","setJson","InputGroup","className","FormControl","plaintext","Append","Button","variant","file","onClick","Form","File","type","accept","onChange","event","target","files","reader","FileReader","addEventListener","readEvent","JSON","parse","result","name","readAsText","App","Jumbotron","Container","Group","controlId","Label","Text","Control","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"ySAwBeA,EArBQ,SAAIC,GAAwD,IAAD,EACtDC,mBAAiB,MADqC,mBACvEC,EADuE,KACjEC,EADiE,KAe9E,OAZAC,qBAAU,WACRC,IAAYC,QAAWN,GAAKO,MAAK,SAACC,GAChCL,EAAQK,QAET,CAACR,IAQG,CACHE,EANWO,uBAAY,SAACC,GACxBP,EAAQO,GACRL,IAAYM,QAAQX,EAAKU,KAC1B,CAACV,M,+BCwDOY,EA/DA,WAAO,IAAD,EACSX,qBADT,mBACVY,EADU,KACHC,EADG,OAEOf,EAA2B,QAFlC,mBAEVgB,EAFU,KAEJC,EAFI,KA8BjB,OAAIH,EAEI,kBAACI,EAAA,EAAD,CAAYC,UAAU,QAClB,kBAACC,EAAA,EAAD,CACIX,MAAQK,EACRO,WAAS,IAEb,kBAACH,EAAA,EAAWI,OAAZ,KACA,kBAACC,EAAA,EAAD,CAAQC,QAAQ,qBAAhB,YAMRR,EAEI,kBAACE,EAAA,EAAD,CAAYC,UAAU,QAClB,kBAACC,EAAA,EAAD,CACIX,MAAQO,EAAKS,KACbJ,WAAS,IAEb,kBAACH,EAAA,EAAWI,OAAZ,KACA,kBAACC,EAAA,EAAD,CAAQC,QAAQ,oBAAoBE,QA1B5B,WAChBT,EAAQ,QAyBA,WAOR,kBAACU,EAAA,EAAKC,KAAN,CAAWC,KAAK,OAAOC,OAAO,QAAQC,SAtDrB,SAACC,GAAgD,IAAD,IAC3DP,EAAI,UAAGO,EAAMC,cAAT,iBAAG,EAAcC,aAAjB,aAAG,EAAsB,GACnC,IAAKT,EAAM,OAAO,KAClB,IAAMU,EAAS,IAAIC,WAcnBD,EAAOE,iBAAiB,QAbH,SAACC,GAA0C,IAAD,IAGvC,oBADLC,KAAKC,MAAL,UAAWF,EAAUL,cAArB,aAAW,EAAkBQ,QACjCZ,MACPd,EAAS,0BAEb,IAAMZ,EAAmB,CACrBsB,KAAMA,EAAKiB,KACX1B,KAAI,UAAEsB,EAAUL,cAAZ,aAAE,EAAkBQ,QAE5BxB,EAAQd,MAIZgC,EAAOQ,WAAWlB,O,gBCMXmB,MA/Bf,WACE,OAEE,yBAAKzB,UAAU,OACb,kBAAC0B,EAAA,EAAD,KACE,mDAEF,kBAACC,EAAA,EAAD,KACE,kBAACnB,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKoB,MAAN,CAAYC,UAAU,kBACpB,kBAACrB,EAAA,EAAKsB,MAAN,4BACA,kBAAC,EAAD,MACA,kBAACtB,EAAA,EAAKuB,KAAN,CAAW/B,UAAU,cAArB,+BAIF,kBAACQ,EAAA,EAAKoB,MAAN,KACE,kBAACpB,EAAA,EAAKsB,MAAN,iBACA,kBAACtB,EAAA,EAAKwB,QAAN,CAActB,KAAK,QAAQuB,YAAY,gBACvC,kBAACzB,EAAA,EAAKuB,KAAN,CAAW/B,UAAU,cAArB,iCAMJ,8BCpBYkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzD,MAAK,SAAA0D,GACJA,EAAaC,gBAEdC,OAAM,SAAAtD,GACLuD,QAAQvD,MAAMA,EAAMwD,c","file":"static/js/main.bbd7fd16.chunk.js","sourcesContent":["import { useState, useCallback, useEffect } from \"react\";\nimport localforage from \"localforage\";\n\nconst useLocalforage = <T>(key: string): [(T|null), (newData: T|null) => void] => {\n    const [data, setData] = useState<T|null>(null);\n\n    useEffect(() => {\n      localforage.getItem<T>(key).then((value: T) => {\n        setData(value);\n    });\n    }, [key]);\n\n\n    const update = useCallback((newData: T|null) => {\n        setData(newData);\n        localforage.setItem(key, newData);\n    }, [key]);\n    \n    return [\n        data,\n        update\n    ]\n}\n\nexport default useLocalforage;","import React, { useState } from \"react\";\nimport useLocalforage from \"../hooks/useLocalforage\";\nimport { InputGroup, FormControl, Button, Form } from 'react-bootstrap';\n\ninterface ApiKeyData {\n    file: string;\n    json: string;\n}\n\nconst ApiKey = () => {\n    const [error, setError] = useState<string|null>();\n    const [json, setJson] = useLocalforage<ApiKeyData>('json');\n    //console.log(json);\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const file = event.target?.files?.[0];\n        if (!file) return null;\n        const reader = new FileReader();\n        const loadComplete = (readEvent: ProgressEvent<FileReader>) => {\n            // validate! \n            const parsed = JSON.parse(readEvent.target?.result as string);\n            if (parsed.type !== \"service_account\") {\n                setError(\"Not a valid JSON file!\")\n            }\n            const data: ApiKeyData = {\n                file: file.name,\n                json: readEvent.target?.result as string\n            }\n            setJson(data);            \n        };\n        \n        reader.addEventListener(\"load\", loadComplete);\n        reader.readAsText(file);\n    }\n\n    const handleClear = () => {\n        setJson(null);\n    }\n\n    if (error) {\n        return (\n            <InputGroup className=\"mb-3\">\n                <FormControl\n                    value={ error }\n                    plaintext\n                />\n                <InputGroup.Append>\n                <Button variant=\"outline-secondary\">Button</Button>\n                </InputGroup.Append>\n            </InputGroup>\n        );    \n    }\n\n    if (json) {\n        return (\n            <InputGroup className=\"mb-3\">\n                <FormControl\n                    value={ json.file }\n                    plaintext\n                />\n                <InputGroup.Append>\n                <Button variant=\"outline-secondary\" onClick={handleClear}>Clear</Button>\n                </InputGroup.Append>\n            </InputGroup>\n        );    \n    }\n\n    return (\n        <Form.File type=\"file\" accept=\".json\" onChange={handleChange}/>\n    );\n}\n\nexport default ApiKey;","import React from 'react';\nimport './App.css';\nimport ApiKey from './components/ApiKey';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Form from 'react-bootstrap/Form';\nimport Container from 'react-bootstrap/Container';\n\nfunction App() {\n  return (\n    \n    <div className=\"App\">\n      <Jumbotron>\n        <h1>Translation parser</h1>\n      </Jumbotron>\n      <Container>\n        <Form>\n          <Form.Group controlId=\"formBasicEmail\">\n            <Form.Label>API Key (json file)</Form.Label>\n            <ApiKey />\n            <Form.Text className=\"text-muted\">\n              todo: provide instructions\n            </Form.Text>\n          </Form.Group>\n          <Form.Group>\n            <Form.Label>Sheet ID</Form.Label>\n            <Form.Control type=\"email\" placeholder=\"Enter email\" />\n            <Form.Text className=\"text-muted\">\n              todo: provide instructions\n            </Form.Text>\n          </Form.Group>\n        </Form>\n      </Container>\n        <p>\n        </p>       \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}