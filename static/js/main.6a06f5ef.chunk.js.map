{"version":3,"sources":["hooks/useLocalforage.ts","components/ApiKey.tsx","components/SheetId.tsx","components/SheetData/index.tsx","components/Reader/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useLocalforage","key","useState","data","setData","useEffect","localforage","getItem","then","value","useCallback","newData","setItem","ApiKey","props","error","setError","apiKey","setApiKey","onChange","handleClear","InputGroup","className","FormControl","placeholder","readOnly","Append","Button","variant","onClick","file","Form","File","type","accept","event","target","files","reader","FileReader","addEventListener","readEvent","parsed","JSON","parse","result","undefined","client_email","private_key","name","credentials","e","readAsText","SheetId","sheetId","setSheetId","Control","SheetData","doc","setDoc","selectedSheet","setSelectedSheet","languages","setLanguages","selectedLanguage","setSelectedLanguage","a","GoogleSpreadsheet","useServiceAccountAuth","loadInfo","sheetsByIndex","response","status","fetch","sheetsById","loadHeaderRow","headersExceptFirst","headerValues","filter","v","i","getRows","indexOf","Card","Body","Group","Label","as","map","sheet","title","lang","keyName","rows","obj","translations","reduce","acc","push","document","createElement","text","stringify","filename","setAttribute","encodeURIComponent","click","download","Alert","Reader","json","setJson","output","setOutput","Text","asString","replace","App","sheetRead","setSheetRead","setErrorText","Jumbotron","Container","Tabs","defaultActiveKey","id","Tab","eventKey","onClose","dismissible","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.6a06f5ef.chunk.js","sourcesContent":["import { useState, useCallback, useEffect } from \"react\";\nimport localforage from \"localforage\";\n\nconst useLocalforage = <T>(key: string): [(T|null), (newData: T|null) => void] => {\n    const [data, setData] = useState<T|null>(null);\n\n    useEffect(() => {\n      localforage.getItem<T>(key).then((value: T) => {\n        setData(value);\n    });\n    }, [key]);\n\n\n    const update = useCallback((newData: T|null) => {\n        setData(newData);\n        localforage.setItem(key, newData);\n    }, [key]);\n    \n    return [\n        data,\n        update\n    ]\n}\n\nexport default useLocalforage;","import React, { useState, useEffect } from \"react\";\nimport useLocalforage from \"../hooks/useLocalforage\";\nimport { InputGroup, FormControl, Button, Form } from 'react-bootstrap';\nimport { ServiceAccountCredentials } from \"google-spreadsheet\";\n\nexport interface ApiKeyData {\n    file: string;\n    credentials: ServiceAccountCredentials;\n}\n\ninterface Props {\n    onChange: (value: ApiKeyData) => void;\n}\n\nconst ApiKey = (props: Props) => {\n    const [error, setError] = useState<string|null>();\n    const [apiKey, setApiKey] = useLocalforage<ApiKeyData>('apiKey');\n    const {onChange} = props;\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const file = event.target?.files?.[0];\n        if (!file) return null;\n        const reader = new FileReader();\n        const loadComplete = (readEvent: ProgressEvent<FileReader>) => {\n            // validate! \n            try {\n                const parsed = JSON.parse(readEvent.target?.result as string);\n                if (parsed.client_email === undefined || parsed.private_key === undefined) {\n                    setError(\"Not a valid JSON file!\")\n                }\n                // if (parsed.type !== \"service_account\") {\n                //     setError(\"Not a valid JSON file!\")\n                // }\n                const data: ApiKeyData = {\n                    file: file.name,\n                    credentials: parsed as ServiceAccountCredentials\n                }\n                setApiKey(data);\n            }\n            catch (e) {\n                setError(\"Error reading file. Is it a API json file?\")\n            }\n        };\n        \n        reader.addEventListener(\"load\", loadComplete);\n        reader.readAsText(file);\n    }\n\n    useEffect(() => {\n        if (apiKey) {\n            onChange(apiKey);\n        }\n    }, [apiKey, onChange])\n\n    const handleClear = () => {\n        setApiKey(null);\n    }\n\n    if (error) {\n        return (\n            <InputGroup className=\"mb-3\">\n                <FormControl\n                    placeholder={error}\n                    className=\"text-danger\"\n                    readOnly\n                />\n                <InputGroup.Append>\n                    <Button variant=\"outline-secondary\" onClick={handleClear}>Clear</Button>\n                </InputGroup.Append>\n            </InputGroup>\n        );    \n    }\n\n    if (apiKey) {\n        return (\n            <InputGroup className=\"mb-3\">\n                <FormControl\n                    placeholder={apiKey.file}\n                    readOnly\n                />\n                <InputGroup.Append>\n                    <Button variant=\"outline-secondary\" onClick={handleClear}>Clear</Button>\n                </InputGroup.Append>\n            </InputGroup>\n        );    \n    }\n\n    return (\n        <Form.File type=\"file\" accept=\".json\" onChange={handleChange}/>\n    );\n}\n\nexport default ApiKey;","import React, { useEffect } from \"react\";\nimport useLocalforage from \"../hooks/useLocalforage\";\nimport { Form } from 'react-bootstrap';\n\ninterface Props {\n    onChange: (value: string) => void;\n}\nconst SheetId = (props: Props) => {\n    const [sheetId, setSheetId] = useLocalforage<string>('sheetId');\n    const {onChange} = props;\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setSheetId(event.target.value);\n        props.onChange(event.target.value);\n    }\n\n    useEffect(() => {\n        if (sheetId) {\n            onChange(sheetId);\n        }\n    }, [sheetId, onChange])\n\n    return (\n        <Form.Control type=\"text\" value={sheetId || \"\"} onChange={handleChange}/>\n    );\n}\n\nexport default SheetId;","import { GoogleSpreadsheet, ServiceAccountCredentials, GoogleSpreadsheetRow } from 'google-spreadsheet';\nimport React, { useEffect, useState } from 'react';\nimport { Alert, Card, Form, Button } from 'react-bootstrap';\n\ninterface Props {\n    sheetId: string;\n    credentials: ServiceAccountCredentials;\n    setError: (error: string|null) => void;\n}\n\nconst SheetData = (props: Props) => {\n    const {setError} = props;\n    const [doc, setDoc] = useState<GoogleSpreadsheet>()\n    const [selectedSheet, setSelectedSheet] = useState<string>();\n    const [languages, setLanguages] = useState<string[]>([]);\n    const [selectedLanguage, setSelectedLanguage] = useState<string>();\n\n    useEffect(() => {\n        const fetch = async () => {\n            try {\n                const doc = new GoogleSpreadsheet(props.sheetId);\n                await doc.useServiceAccountAuth(props.credentials);\n                await doc.loadInfo();\n                \n                setSelectedSheet(doc.sheetsByIndex[0].sheetId);\n                setDoc(doc);\n            }\n            catch (e) {\n                //debugger;\n                if (!e.response) {\n                    setError(`Generic error!\\n${e}`);\n                    return;\n                }\n                switch (e.response.status) {\n                    case 403: \n                        setError(`Credentials invalid. \\nEnsure '${props.credentials.client_email}' has read access to the sheet.`);\n                        break;\n                    case 404: \n                        setError(\"Invalid sheet id\");\n                        break;\n                }\n            }\n        };\n        fetch();\n    }, [props.credentials, props.sheetId, setError]);\n    \n    useEffect(() => {\n        if (!doc || selectedSheet === undefined) { return };\n        const getRows = async () => {\n            await doc.sheetsById[selectedSheet].loadHeaderRow();\n\n            const headersExceptFirst = doc.sheetsById[selectedSheet].headerValues.filter((v, i) => i > 0);\n            setLanguages(headersExceptFirst);\n        }\n        getRows();\n    }, [doc, selectedSheet]);\n    \n\n    useEffect(() => {\n        // If list of languages has changed and the previous value is not found, reset to first value\n        if (!selectedLanguage || languages.indexOf(selectedLanguage) === -1) {\n            setSelectedLanguage(languages[0]);\n        }        \n    }, [languages, selectedLanguage])\n\n    const handleSheetChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n        setSelectedSheet(event.target.value)\n    }\n\n    const handleLanguageChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n        setSelectedLanguage(event.target.value);\n    }\n\n    const handleDownload = () => {\n        const download = async () => {\n            if (!doc || selectedLanguage === undefined || selectedSheet === undefined) return;\n            const keyName = doc.sheetsById[selectedSheet].headerValues[0];  // should be just 'key' but you never know\n            const rows = await doc.sheetsById[selectedSheet].getRows();\n            const obj = {\n                translations: rows.reduce((acc: { key: string, value: string}[], value: GoogleSpreadsheetRow) => {\n                    if (value[keyName] !== undefined) {\n                        acc.push({\n                            key: value[keyName],\n                            value: value[selectedLanguage]\n                        });\n                    }\n                    return acc;\n                }, [])\n            };\n            \n            const a = document.createElement('a');\n            const text = JSON.stringify(obj, null, 4);\n            const filename = `${doc.sheetsById[selectedSheet].title}_${selectedLanguage}.json`;\n            a.setAttribute('href', 'data:text/json;charset=utf-8,'+encodeURIComponent(text));\n            a.setAttribute('download', filename);\n            a.click()\n        }\n        download();\n    }\n    if (!doc || selectedSheet === undefined) {\n        return (\n            <Alert variant=\"info\">Loading...</Alert>\n        )\n    }\n\n    return (\n        <Card>\n            <Card.Body>\n                <Form.Group>\n                    <Form.Label>Game</Form.Label>\n                    <Form.Control as=\"select\" onChange={handleSheetChange}>\n                        {doc.sheetsByIndex.map(sheet => (\n                            <option key={sheet.sheetId} value={sheet.sheetId}>{sheet.title}</option>\n                        ))}\n                    </Form.Control>\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>Language</Form.Label>\n                    <Form.Control as=\"select\" onChange={handleLanguageChange}>\n                        {languages.map(lang => (\n                            <option key={lang} value={lang}>{lang}</option>\n                        ))}\n                    </Form.Control>\n                </Form.Group>\n                {  (selectedLanguage !== undefined && selectedSheet !== undefined) && (\n                    <Button onClick={handleDownload}>\n                        Download\n                    </Button>\n                )}\n            </Card.Body>\n        </Card>\n    );\n}\n\nexport default SheetData;","import React, { useState } from 'react';\nimport { Alert, Button, Form } from 'react-bootstrap';\n\ninterface Json {\n    translations: [{key: string, value: string}]\n}\nconst Reader = () => {\n    const [json, setJson] = useState<Json>();\n    const [output, setOutput] = useState(\"\");\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        let data = null;\n        try { \n            data = JSON.parse(event.target.value);\n        }\n        catch (e) {\n            // Lets try wrapping it in braces\n            data = JSON.parse(`{${event.target.value}}`)\n        }\n        setJson(data);\n    }\n\n    const handleReadSheet = () => {\n        if (!json) return;\n        const asString = json.translations.reduce((acc, value) => {\n            acc += `${value.key};${value.value.replace(/\\n/g, '\\\\n')}\\n`;\n            return acc;\n        }, \"\");\n        setOutput(asString);\n    }\n\n    return (\n        <>\n        <Form.Group>\n            <Form.Label>Reader</Form.Label>\n            <Form.Text className=\"text-muted\">\n              {`Paste translations JSON here`}\n            </Form.Text>\n            <Form.Control as=\"textarea\" rows={9} onChange={handleChange} />\n            <Button onClick={handleReadSheet}  className=\"mt-3\">\n                Read JSON\n            </Button>\n            <Form.Text className=\"text-muted\">\n              {`Output`}\n            </Form.Text>\n            <Form.Control as=\"textarea\" rows={9} className=\"muted\" value={output} />\n            <Alert variant=\"info\">\n                Paste in google sheets <br />\n                Make sure to choose \"Split text to Column, Seperator: semicolon\"...\n            </Alert>\n\n          </Form.Group>\n\n          </>\n    );\n}\n\nexport default Reader;\n","import React, { useState } from 'react';\nimport ApiKey, { ApiKeyData } from './components/ApiKey';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Form from 'react-bootstrap/Form';\nimport Container from 'react-bootstrap/Container';\nimport SheetId from 'components/SheetId';\nimport SheetData from 'components/SheetData';\nimport { Button, Alert, Tabs, Tab } from 'react-bootstrap';\nimport './App.css';\nimport Reader from 'components/Reader';\n\nfunction App() {\n  const [apiKey, setApiKey] = useState<ApiKeyData|null>();\n  const [sheetId, setSheetId] = useState<string|null>();\n\n  const [sheetRead, setSheetRead] = useState(false);\n  const [error, setError] = useState<string|null>();\n\n\n  const handleReadSheet = () => {\n\n    if (!(apiKey && sheetId)) {\n      setErrorText(\" Please upload a API key json and fill out the sheet ID\");\n      return;\n    }\n    setError(null);\n    setSheetRead(true);\n  }\n\n  const setErrorText = (text: string|null) => {\n    if (text !== null){\n      setSheetRead(false);\n    }\n    setError(text);\n  }\n\n  return (\n    \n    <div className=\"App\">\n      <Jumbotron className=\"text-center\">\n        <h1>Translation parser</h1>\n      </Jumbotron>\n\n      <Container>\n        <Tabs defaultActiveKey=\"sheets2Json\" id=\"tab\" className=\"mb-4\">\n          <Tab eventKey=\"sheets2Json\" title=\"Google sheets -> JSON\">\n            <Form>\n              <Form.Group>\n                <Form.Label>API Key (json file)</Form.Label>\n                <Form.Text className=\"text-muted\">\n                  <ol>\n                    <li>Go to: https://console.developers.google.com/ and create a project</li>\n                    <li>Add the Google Sheets API</li>\n                    <li>Create a service account</li>\n                    <li>Create a new JSON key under this service account and upload this key here</li>\n                    <li>Ensure share the google sheet to the the e-mail address of the service account</li>\n                  </ol>\n                </Form.Text>\n                <ApiKey onChange={setApiKey}/>\n              </Form.Group>\n              <Form.Group>\n                <Form.Label>Sheet ID</Form.Label>\n                <Form.Text className=\"text-muted\">\n                  {`Copy from https://docs.google.com/spreadsheets/d/<SHEET ID>`}\n                </Form.Text>\n                <SheetId onChange={setSheetId} />\n              </Form.Group>\n            </Form>\n            { error && (\n              <Alert variant=\"danger\" className=\"mt-3\" onClose={() => setErrorText(null)} dismissible>\n                {error}\n              </Alert>\n            )}\n            { (!sheetRead || !apiKey || !sheetId ) && (\n              <Button onClick={handleReadSheet}>\n                Read sheet!\n              </Button>\n            )}\n            { (apiKey && sheetId && sheetRead) && (\n              <SheetData \n                sheetId={sheetId} \n                credentials={apiKey.credentials}\n                setError={setErrorText}\n              />\n            )}\n          </Tab>\n\n          <Tab eventKey=\"json2Sheets\" title=\"JSON -> Google sheets  \">\n            <Reader/>\n          </Tab>\n        </Tabs>    \n\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}